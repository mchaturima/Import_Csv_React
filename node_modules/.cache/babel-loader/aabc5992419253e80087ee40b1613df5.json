{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/REACT/importing-csv/src/components/ImportCsv.js\",\n    _s = $RefreshSig$();\n\nimport react, { useEffect } from 'react';\nimport { csv } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ImportCsv() {\n  _s();\n\n  const [items, setItems] = useState([]);\n\n  const readExcel = file => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        const wb = XLSX.read(bufferArray, {\n          type: \"buffer\"\n        });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(d => {\n      setItems(d);\n    });\n  };\n\n  function fileHandler(event) {\n    console.log(event);\n    let fileObj = event.target.files[0];\n    console.log(fileObj);\n    readExcel(fileObj);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv,.xlsx,.xls\",\n      onChange: fileHandler.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n\n_s(ImportCsv, \"6WAym07vHedVzpAy8bFDJKqtv8I=\");\n\n_c = ImportCsv;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImportCsv\");","map":{"version":3,"sources":["/home/user/Documents/REACT/importing-csv/src/components/ImportCsv.js"],"names":["react","useEffect","csv","ImportCsv","items","setItems","useState","readExcel","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","XLSX","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","onerror","error","then","d","fileHandler","event","console","log","fileObj","files","bind"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,GAAR,QAAkB,IAAlB;;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAElC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMC,SAAS,GAAIC,IAAD,IAAU;AAC1B,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/C,YAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACAD,MAAAA,UAAU,CAACE,iBAAX,CAA6BP,IAA7B;;AAEAK,MAAAA,UAAU,CAACG,MAAX,GAAqBC,CAAD,IAAO;AACzB,cAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,MAA7B;AAEA,cAAMC,EAAE,GAAGC,IAAI,CAACC,IAAL,CAAUL,WAAV,EAAuB;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAAvB,CAAX;AAEA,cAAMC,MAAM,GAAGJ,EAAE,CAACK,UAAH,CAAc,CAAd,CAAf;AAEA,cAAMC,EAAE,GAAGN,EAAE,CAACO,MAAH,CAAUH,MAAV,CAAX;AAEA,cAAMI,IAAI,GAAGP,IAAI,CAACQ,KAAL,CAAWC,aAAX,CAAyBJ,EAAzB,CAAb;AAEAhB,QAAAA,OAAO,CAACkB,IAAD,CAAP;AACD,OAZD;;AAcAhB,MAAAA,UAAU,CAACmB,OAAX,GAAsBC,KAAD,IAAW;AAC9BrB,QAAAA,MAAM,CAACqB,KAAD,CAAN;AACD,OAFD;AAGD,KArBe,CAAhB;AAuBAxB,IAAAA,OAAO,CAACyB,IAAR,CAAcC,CAAD,IAAO;AAClB9B,MAAAA,QAAQ,CAAC8B,CAAD,CAAR;AACD,KAFD;AAGD,GA3BD;;AA4BA,WAASC,WAAT,CAAqBC,KAArB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAIG,OAAO,GAAGH,KAAK,CAAClB,MAAN,CAAasB,KAAb,CAAmB,CAAnB,CAAd;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAjC,IAAAA,SAAS,CAACiC,OAAD,CAAT;AACD;;AACC,sBACE;AAAA,2BACC;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,MAAM,EAAC,iBAA1B;AAA4C,MAAA,QAAQ,EAAEJ,WAAW,CAACM,IAAZ,CAAiB,IAAjB;AAAtD;AAAA;AAAA;AAAA;AAAA;AADD,mBADF;AAKD;;GA3CqBvC,S;;KAAAA,S","sourcesContent":["import react, { useEffect } from 'react';\nimport {csv} from 'd3';\n\nexport default function ImportCsv() {\n\n  const [items, setItems] = useState([]);\n\n  const readExcel = (file) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const bufferArray = e.target.result;\n\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n\n        const wsname = wb.SheetNames[0];\n\n        const ws = wb.Sheets[wsname];\n\n        const data = XLSX.utils.sheet_to_json(ws);\n\n        resolve(data);\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n\n    promise.then((d) => {\n      setItems(d);\n    });\n  };\n  function fileHandler(event){\n    console.log(event);\n    let fileObj = event.target.files[0];\n    console.log(fileObj);\n    readExcel(fileObj);\n  }\n    return (\n      <>\n       <input type=\"file\" accept=\".csv,.xlsx,.xls\" onChange={fileHandler.bind(this)} />\n      </>\n    );\n  }\n  "]},"metadata":{},"sourceType":"module"}