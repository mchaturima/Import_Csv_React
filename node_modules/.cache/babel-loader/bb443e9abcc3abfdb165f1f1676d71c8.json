{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/REACT/importing-csv/src/components/ImportCsv.js\";\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ImportCsv(props) {\n  const readExcel = file => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        console.log(bufferArray);\n        const wb = XLSX.read(bufferArray, {\n          type: \"buffer\"\n        });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(d => {\n      // console.log(d);\n      console.log(d); // for(let i in d){\n      //   console.log(d[i].phone)\n      // }\n      // const unique = new Set();\n      // const showError = d.some(element => unique.add(element.id).size);\n      // console.log(showError);\n\n      var names_array_new = d.reduceRight(function (r, a) {\n        r.some(function (b) {\n          if (a.phone === b.phone) {\n            a.phone = \"Invalid\";\n            b.phone = \"Invalid\";\n          }\n\n          if (a.username === b.username) {\n            a.username = \"Invalid\";\n            b.username = \"Invalid\";\n          }\n\n          if (a.email === b.email) {\n            a.email = \"Invalid\";\n            b.email = \"Invalid\";\n          }\n        }) || r.push(a);\n        return r;\n      }, []);\n      console.log(names_array_new);\n      props.tableData(d);\n    });\n  };\n\n  function fileHandler(event) {\n    console.log(event);\n    let fileObj = event.target.files[0]; // console.log(fileObj);\n\n    readExcel(fileObj);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv,.xlsx,.xls\",\n      onChange: fileHandler.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n_c = ImportCsv;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImportCsv\");","map":{"version":3,"sources":["/home/user/Documents/REACT/importing-csv/src/components/ImportCsv.js"],"names":["React","useState","useEffect","XLSX","ImportCsv","props","readExcel","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","console","log","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","onerror","error","then","d","names_array_new","reduceRight","r","a","some","b","phone","username","email","push","tableData","fileHandler","event","fileObj","files","bind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\n\nexport default function ImportCsv(props) {\n\n  const readExcel = (file) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const bufferArray = e.target.result;\n        console.log(bufferArray);\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n\n        const wsname = wb.SheetNames[0];\n\n        const ws = wb.Sheets[wsname];\n\n        const data = XLSX.utils.sheet_to_json(ws);\n\n        resolve(data);\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n\n    promise.then((d) => {\n      // console.log(d);\n      console.log(d);\n      // for(let i in d){\n      //   console.log(d[i].phone)\n      // }\n      // const unique = new Set();\n      // const showError = d.some(element => unique.add(element.id).size);\n      // console.log(showError);\n\n      var names_array_new = d.reduceRight(function (r, a) {\n        r.some(function (b) {\n          if(a.phone === b.phone){\n             a.phone = \"Invalid\";\n             b.phone = \"Invalid\";\n          }\n\n          if(a.username === b.username){\n            a.username = \"Invalid\";\n            b.username = \"Invalid\";\n         }\n\n         if(a.email === b.email){\n          a.email = \"Invalid\";\n          b.email = \"Invalid\";\n       }\n          \n        }) || r.push(a);\n        return r;\n    }, []);\n\nconsole.log(names_array_new);\n      props.tableData(d);\n    });\n  };\n\n\n \n  function fileHandler(event){\n    console.log(event);\n    let fileObj = event.target.files[0];\n    // console.log(fileObj);\n    readExcel(fileObj);\n    \n  }\n\n    return (\n      <>\n       <input type=\"file\" accept=\".csv,.xlsx,.xls\" onChange={fileHandler.bind(this)} />\n      </>\n    );\n  }\n  \n  "]},"metadata":{},"sourceType":"module"}